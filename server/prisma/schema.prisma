// prisma/schema.prisma

// ---------- Datasource & generator ----------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// === NEW ===
enum Role {
  ADMIN
  MANAGER
  ESTIMATOR
  USER
}

// ---------- Auth / Users ----------
model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  name         String?
  /// Allowed values in app code: "ADMIN" | "MANAGER" | "USER"
  role         String    @default("USER")   // store as text
  passwordHash String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Bids where this user is the owner
  bidsOwned          Bid[]     @relation("BidOwner")
  bidsLastModified   Bid[]     @relation("BidLastModifiedBy")
  bidsEstimating     Bid[]     @relation("BidEstimator")
  companiesManaged   Company[] @relation("CompanyAccountManager")
}

// ---------- Core models ----------
model Company {
  id        Int       @id @default(autoincrement())
  name      String

  // Contact Information (1)
  website   String?
  address   String?
  city      String?
  state     String?
  zip       String?

  // Relationship Tracking (3)
  accountManagerId   Int?
  accountManager     User?      @relation("CompanyAccountManager", fields: [accountManagerId], references: [id])
  relationshipStatus String?    // "active" | "inactive" | "prospect"
  customerSince      DateTime?
  lastContactDate    DateTime?
  nextFollowUpDate   DateTime?

  // Additional Features (5)
  notes              String?    // General notes/description

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  contacts           Contact[]
  bids               Bid[]
  companyTags        CompanyTag[]
  companyAttachments CompanyAttachment[]
  activityLogs       CompanyActivityLog[]

  @@index([accountManagerId])
  @@index([relationshipStatus])
  @@index([nextFollowUpDate])
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  title     String?
  email     String?
  phone     String?
  isPrimary Boolean  @default(false)  // Mark primary contact
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])

  bids      Bid[]    @relation("BidContact")

  @@index([companyId])
  @@index([isPrimary])
}


model Bid {
  id               Int         @id @default(autoincrement())
  projectName      String

  // Client & contact relations
  clientCompanyId  Int
  clientCompany    Company     @relation(fields: [clientCompanyId], references: [id])

  contactId        Int?
  contact          Contact?    @relation("BidContact", fields: [contactId], references: [id])

  // Optional owner (user) for permissions/visibility
  ownerId          Int?
  owner            User?       @relation("BidOwner", fields: [ownerId], references: [id])

  // Estimator assignment
  estimatorId      Int?
  estimator        User?       @relation("BidEstimator", fields: [estimatorId], references: [id])

  // Meta
  proposalDate     DateTime?
  dueDate          DateTime?
  followUpOn       DateTime?   // NEW: date for "Follow-up in"
  jobLocation      String?
  leadSource       String?

  // Tabs/status: keep as String on SQLite (app will use: Active | Complete | Archived | Hot | Cold)
  bidStatus        String
  archived         Boolean     @default(false)

  // Audit tracking
  lastModifiedById Int?
  lastModifiedBy   User?       @relation("BidLastModifiedBy", fields: [lastModifiedById], references: [id])
  lastModifiedAt   DateTime?

  // Relations
  scopes           Scope[]
  notes            Note[]
  attachments      Attachment[]
  tags             BidTag[]

  // Timestamps
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([clientCompanyId])
  @@index([contactId])
  @@index([ownerId])
  @@index([estimatorId])
  @@index([bidStatus])
  @@index([followUpOn]) // helpful for follow-up views
}

model Scope {
  id     Int     @id @default(autoincrement())
  name   String
  cost   Float   @default(0)
  // "Pending" | "Won" | "Lost" as plain string on SQLite
  status String
  bidId  Int
  bid    Bid     @relation(fields: [bidId], references: [id])

  @@index([bidId])
  @@index([status])
}

model Note {
  id        Int      @id @default(autoincrement())
  text      String
  bidId     Int
  bid       Bid      @relation(fields: [bidId], references: [id])
  createdAt DateTime @default(now())

  @@index([bidId])
}

model Attachment {
  id           Int      @id @default(autoincrement())
  bidId        Int
  bid          Bid      @relation(fields: [bidId], references: [id])
  originalName String
  path         String
  mimetype     String?
  size         Int?
  createdAt    DateTime @default(now())

  @@index([bidId])
}

model Tag {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  bids  BidTag[]
}

model BidTag {
  bidId Int
  tagId Int
  bid   Bid @relation(fields: [bidId], references: [id])
  tag   Tag @relation(fields: [tagId], references: [id])

  @@id([bidId, tagId])
  @@index([tagId])
}

model ScopeCatalog {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  defaultCost Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ---------- Company-specific models ----------
model CompanyTag {
  id        Int      @id @default(autoincrement())
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tagName   String
  createdAt DateTime @default(now())

  @@index([companyId])
  @@index([tagName])
}

model CompanyAttachment {
  id           Int      @id @default(autoincrement())
  companyId    Int
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  originalName String
  path         String
  mimetype     String?
  size         Int?
  uploadedBy   String?  // user email or name
  createdAt    DateTime @default(now())

  @@index([companyId])
}

model CompanyActivityLog {
  id        Int      @id @default(autoincrement())
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  activityType String // "note" | "call" | "meeting" | "email" | "update"
  description  String
  performedBy  String? // user email or name
  createdAt    DateTime @default(now())

  @@index([companyId])
  @@index([activityType])
  @@index([createdAt])
}
